const express = require('express');
const dbMiddleware = require('../../utils/middleware');
const controller = require('../controllers/weeklyScorecardController');

const router = express.Router();

// Indiquer le modÃ¨le dynamique requis
router.use((req, res, next) => {
  req.requiredModels = ['WeeklyScorecards']; // doit correspondre au nom que ton middleware utilise
  next();
});

// Brancher le middleware DB (crÃ©ation du modÃ¨le dynamique depuis le schema)
router.use(dbMiddleware);

// CRUD
// ðŸ“Œ Liste des semaines disponibles
router.get('/AllWeeks', controller.getAvailableWeeks);
router.post('/create', controller.createWeeklyScorecard);
router.get('/all', controller.getAllWeeklyScorecards);
router.get('/:id', controller.getWeeklyScorecardById);
router.put('/update/:id', controller.updateWeeklyScorecard);
router.delete('/delete/:id', controller.deleteWeeklyScorecard);

// Upsert par (employeeId, weekId)
router.put('/upsert', controller.upsertWeeklyScorecard);



// ðŸ“Œ Toutes les fiches dâ€™une semaine donnÃ©e
router.post('/weekId/:weekId', controller.getWeeklyScorecardsByWeek);

// Upsert en bulk (tableau dâ€™items)
router.put('/upsert/bulk', controller.bulkUpsertWeeklyScorecards);


// ðŸ‘‰ Weeks d'un employÃ© (liste + total)
router.get('/driver/:employeeId', controller.getEmployeeWeeks);

// ðŸ‘‰ DÃ©tail pour un employÃ© et une semaine donnÃ©e
router.get('/by-employee/:employeeId/week/:weekId', controller.getEmployeeWeekDetails);


// ðŸ“Œ DerniÃ¨res 6 semaines dâ€™un employÃ©
router.get('/last6weeks/:employeeId', controller.getLast6WeeksByEmployee);




module.exports = router;
